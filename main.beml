type 'a list =
  | Nil
  | Cons of 'a * ('a list)

type expr =
  | Int of int
  | Var of string
  | Fun of (expr * expr)
  | App of (expr * expr)

val (+) : int -> int -> int

let map f = function
  | Nil => Nil
  | Cons (x, xs) => Cons (f x, map f xs)

let () =
  let _ = map (fun x -> x + 1) [1, 2, 3] in
  let i = Int (1 + 2) in
  let a = App (i, i) in
  ()
